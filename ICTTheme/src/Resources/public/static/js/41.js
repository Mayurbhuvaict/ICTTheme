(this["webpackJsonpPlugini-c-t-theme"]=this["webpackJsonpPlugini-c-t-theme"]||[]).push([[41],{Bx5l:function(n,e,t){"use strict";t.r(e);var i=Shopware.Mixin;e.default={template:'{% block sw_cms_el_config_ict_text %}\n<sw-tabs\n    position-identifier="sw-cms-element-config-ict-text"\n    class="sw-cms-el-config-ict-text__tabs"\n    default-item="content"\n>\n\n    <template #default="{ active }">\n        \n        {% block sw_cms_el_config_ict_text_tab_content %}\n        <sw-tabs-item\n            :title="$tc(\'sw-cms.elements.general.config.tab.content\')"\n            name="content"\n            :active-tab="active"\n        >\n            {{ $tc(\'sw-cms.elements.general.config.tab.content\') }}\n        </sw-tabs-item>\n        {% endblock %}\n\n\n        \n        {% block sw_cms_el_ict_text_config_tab_options %}\n        <sw-tabs-item\n            :title="$tc(\'sw-cms.elements.general.config.tab.settings\')"\n            name="settings"\n            :active-tab="active"\n        >\n            {{ $tc(\'sw-cms.elements.general.config.tab.settings\') }}\n        </sw-tabs-item>\n        {% endblock %}\n    </template>\n\n    <template\n        #content="{ active }"\n    >\n        \n        {% block sw_cms_el_ict_text_config_content %}\n        <sw-container\n            v-if="active === \'content\'"\n            class="sw-cms-el-config-text__tab-content"\n        >\n            <sw-cms-mapping-field\n                v-model="element.config.content"\n                :label="$tc(\'sw-cms.elements.text.config.label.content\')"\n                value-types="string"\n            >\n                <sw-text-editor\n                    :value="element.config.content.value"\n                    :allow-inline-data-mapping="true"\n                    :upload-tag="uploadTag"\n                    sanitize-input\n                    enable-transparent-background\n                    @input="onInput"\n                    @blur="onBlur"\n                />\n                <div\n                        slot="preview"\n                        slot-scope="{ demoValue }"\n                        class="sw-cms-el-config-ict-text__mapping-preview"\n                >\n                    <img\n                            v-if="demoValue.url"\n                            :src="demoValue.url"\n                            alt=""\n                    >\n                    <sw-alert\n                            v-else\n                            class="sw-cms-el-config-ict-text__preview-info"\n                            variant="info"\n                    >\n                        {{ $tc(\'sw-cms.detail.label.mappingEmptyPreview\') }}\n                    </sw-alert>\n                </div>\n\n{#                <template #preview="{ demoValue }">#}\n{#                    <div class="sw-cms-el-config-text__mapping-preview">#}\n{#                        <div v-html="$sanitize(demoValue)"></div>#}\n{#                    </div>#}\n{#                </template>#}\n            </sw-cms-mapping-field>\n        </sw-container>\n        {% endblock %}\n\n        \n        {% block sw_cms_el_ict_text_config_settings %}\n        <sw-container\n            v-if="active === \'settings\'"\n            class="sw-cms-el-config-text__tab-settings"\n        >\n            \n            {% block sw_cms_el_ict_text_config_settings_vertical_align %}\n            <sw-select-field\n                v-model="element.config.verticalAlign.value"\n                :label="$tc(\'sw-cms.elements.general.config.label.verticalAlign\')"\n                :placeholder="$tc(\'sw-cms.elements.general.config.label.verticalAlign\')"\n            >\n                <option value="flex-start">\n                    {{ $tc(\'sw-cms.elements.general.config.label.verticalAlignTop\') }}\n                </option>\n                <option value="center">\n                    {{ $tc(\'sw-cms.elements.general.config.label.verticalAlignCenter\') }}\n                </option>\n                <option value="flex-end">\n                    {{ $tc(\'sw-cms.elements.general.config.label.verticalAlignBottom\') }}\n                </option>\n\n\n            </sw-select-field>\n                <div class="sw-cms-el-config-ict-text__link">\n                    <sw-dynamic-url-field\n                            v-model="element.config.url.value"\n                    />\n                    <sw-field\n                            {#v-model="element.config.newTab.value"#}\n                            class="sw-cms-el-config-ict-text__link-tab"\n                            type="switch"\n                            :label="$tc(\'sw-cms.elements.ictTab.label\')"\n                    />\n                </div>\n            {% endblock %}\n        </sw-container>\n\n\n\n        {% endblock %}\n           </template>\n</sw-tabs>\n{% endblock %}\n',mixins:[i.getByName("cms-element")],computed:{uploadTag:function(){return"cms-element-text-config-".concat(this.element.id)}},created:function(){this.createdComponent()},methods:{createdComponent:function(){this.initElementConfig("text")},onBlur:function(n){this.emitChanges(n)},onInput:function(n){this.emitChanges(n)},emitChanges:function(n){n!==this.element.config.content.value&&(this.element.config.content.value=n,this.$emit("element-update",this.element))}}}}}]);